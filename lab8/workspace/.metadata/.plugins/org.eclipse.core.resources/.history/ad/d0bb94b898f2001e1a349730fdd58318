/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "xil_printf.h"
#include "stdint.h"
#include <stdio.h>
#include "platform.h"
#include <stdbool.h>

#define DELAY_UNIT 80

#define LEDS (*(unsigned volatile *)0x40000000)
#define SW (*(unsigned volatile *)0x40000008)
#define JB (*(unsigned volatile *)0x40010000)

#define DPSEG (*(unsigned volatile *)0x40020000)
#define AN (*(unsigned volatile *)0x40020008)
#define BTN (*(unsigned volatile *)0x40030000)

#define ONE_US 100
#define ONE_MS 100*1000

#define ALARM_CNTR (*(volatile unsigned *)0x44a00000)
#define ALARM0 (* (volatile unsigned *)0x44a00004)
#define ALARM0_VALUE (* (volatile unsigned *)0x44a00008)

#define ALARM1_VALUE (* (volatile unsigned *)0x44a0000C)

#define ECHO_count (* (volatile unsigned *)0x44a10000)


void delay_us(uint32_t val){
    while((ALARM0 & (1<<0)) == 0){}
    ALARM0_VALUE = 1000;
}

bool switch_enabled() {
    return SW & (1 << 0);
}



void delay_ms(unsigned t) {
    unsigned cntr1, cntr2;
    while (t--)
        for (cntr1 = 0; cntr1 < 100; cntr1++) {
            for (cntr2 = 0; cntr2 < DELAY_UNIT; cntr2++) {}
        }
}

void delay_ms1(uint32_t val){
    while((ALARM0 & (1<<0)))
    ALARM1_VALUE = ONE_MS * val;
}

// Debouncer for the left button
_Bool left_button_press() {
    static _Bool state = 0;
    _Bool value = 0;

    if(!state && BTN &(1<<2)){
        value = 1;
    }

    state = BTN & (1<<2);
    return value;
}

//up button is pressed
_Bool up_button_press() {
    static _Bool state = 0;
    _Bool value = 0;

    if(!state && BTN &(1<<0)){
        value = 1;
    }

    state = BTN & (1<<0);
    return value;
}

//down button is pressed
_Bool down_button_press() {
    static _Bool state = 0;
    _Bool value = 0;

    if(!state && BTN &(1<<1)){
        value = 1;
    }

    state = BTN & (1<<1);
    return value;
}

// Debouncer for the right button
_Bool right_button_press() {
    static _Bool state = 0;
    _Bool value = 0;

    if(!state && BTN &(1<<3)){
        value = 1;
    }

    state = BTN & (1<<3);
    return value;
}

void led_flasher(uint16_t duty){
    static unsigned state = 0;
    if( state == 999){
        LEDS |= (1<<0);
        JB |= (1<<0);
    }
    if( state == (duty-1)){
        LEDS &= ~(1<<0);
        JB &= ~(1<<0);
    }
    if( ++state == 1000){
        state = 0;
    }
}

void jb_pulser(){
        JB |= (1 << 1);
        delay_us(10);
        JB &= ~(1 << 1);
}


// Driver for the seven-segment display
void seg_disp(uint8_t data[4],  uint8_t cursor) {
    const uint8_t disp_lut[10] = {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110,
                                   0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01101111};

    static uint8_t state = 0;
    static unsigned f_state = 0;

    AN = ~(1 << state);

    if (cursor == state){
        if (++f_state < 512)
        {
            AN = ~(1 << state);
        }
        else
        {
            AN = 15;
        }
    }
    else{
        AN = ~(1 << state);
    }



    DPSEG = ~(disp_lut[data[3-state]]);

    if (state == 1){
        DPSEG &= ~(1 << 7);
    }

    state = (state+1)%4;
    f_state = (f_state+1)%1024;
}



// void generate_pwm(uint16_t duty_cycle) {
//     static uint16_t counter = 0;
//     counter++;

//     // Calculate the threshold value for the duty cycle
//     uint16_t threshold = (uint16_t)((float)duty_cycle / DUTY_RESOLUTION * PWM_PERIOD_MS);


//     if (counter <= threshold) {

//         LEDS |= (1 << 0);
//         JB |= (1 << 0);
//     } else {

//         LEDS &= ~(1 << 0);
//         JB &= ~(1 << 0);
//     }


//     if (counter >= PWM_PERIOD_MS) {
//         counter = 0;
//     }
//}

int main() {
    print("Lab 8 launched!!\n");

    int distance;
    int distance_inch;


    uint8_t a0;
    uint8_t a1;
    uint8_t a2;
    uint8_t a3;

    print("Part 1\n");

    static uint8_t cursor = 0;
    if (left_button_press()) {
        cursor = (cursor+1)%4;

    }

    if (right_button_press()) {
        if (cursor==0)
            cursor=3;
        else
            cursor = (cursor-1)%3;
    }


    print("Part 2\n");

    static uint8_t counter = 0;
    uint8_t cnt = 0;
    uint8_t prev_cnt = 0;
    uint8_t diff;
    while(1){
        delay_ms(1);



        if(++counter == 60)
        {
            print("Part 4\n");
            jb_pulser();
            // delay_ms(1);
            print("Part 5\n");
            cnt = ECHO_count;
            // JB |= (1<<0);
            diff = cnt - prev_cnt;
            xil_printf("%d\n", diff);
            prev_cnt = cnt;
            counter = 0;
        }


        distance = (diff * 340)/2;
        distance_inch = (diff/254)*100;

        if (SW & (1<<0))
        {
            xil_printf("%f",distance_inch);
            int temp_di = distance_inch;
            if (distance_inch == 0)
            {
                LEDS |= (1<<0);
            }
            else if (distance_inch < 1)
            {
                LEDS |= (1<<2);
            }
            else if (distance_inch < 2)
            {
                LEDS |= (1<<4);
            }
            else if (distance_inch < 2)
            {
                LEDS |= (1<<6);
            }
            else if (distance_inch < 3)
            {
                LEDS |= (1<<8);
            }
            else if (distance_inch < 3)
            {
                LEDS |= (1<<10);
            }
            else if (distance_inch < 4)
            {
                LEDS |= (1<<12);
            }
            else
            {
                LEDS = 0xFF;
            }

            temp_di = temp_di * 10;
            a0 = temp_di%10;
            temp_di = temp_di/10;
            a1 = temp_di%10;
            temp_di = temp_di/10;
            a2 = temp_di%10;
            temp_di = temp_di/10;
            a3 = temp_di%10;
        }
        else {
            xil_printf("%f",distance);
            int temp_d = distance;
            if (distance == 0)
            {
                LEDS |= (1<<0);
            }
            else if (distance < 2)
            {
                LEDS |= (1<<2);
            }
            else if (distance < 4)
            {
                LEDS |= (1<<4);
            }
            else if (distance < 6)
            {
                LEDS |= (1<<6);
            }
            else if (distance < 8)
            {
                LEDS |= (1<<8);
            }
            else if (distance < 10)
            {
                LEDS |= (1<<10);
            }
            else if (distance < 12)
            {
                LEDS |= (1<<12);
            }
            else
            {
                LEDS = 0xFF;
            }
            a0 = temp_d%10;
            temp_d = temp_d/10;
            a1 = temp_d%10;
            temp_d = temp_d/10;
            a2 = temp_d%10;
            temp_d = temp_d/10;
            a3 = temp_d%10;
        }



        uint8_t data[4] = {a3,a2,a1,a0};

        data[0] = a3;
        data[1] = a2;
        data[2] = a1;
        data[3] = a0;

        seg_disp(data,cursor);

    }

    return 0;

}







